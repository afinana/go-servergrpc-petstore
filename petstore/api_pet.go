/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package petstore

import (
	"context"
	"strconv"

	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func (app *Application) AddPet(ctx context.Context, in *AddPetRequest) (*emptypb.Empty, error) {

	out := new(emptypb.Empty)
	// Define Pets model
	petRequest := in.GetBody()
	m := createPetEntity(petRequest)

	// Insert new Pets
	pet, err := app.pets.Insert(*m)
	if err != nil {
		app.serverError(err)
		return nil, status.Errorf(codes.Internal, "AddPet error: %s", err)
	}
	//m.id = insertResult.InsertedID.(primitive.ObjectID)
	app.infoLog.Printf("New pet have been created, id=%s", pet.ID)

	return out, nil

}
func (app *Application) GetPetById(ctx context.Context, in *GetPetByIdRequest) (*Pet, error) {

	// Get id from incoming url
	id := strconv.FormatInt(in.PetId, 10)
	app.infoLog.Printf("Get pet by id=%s \n", id)

	// Find Pets by id
	model, err := app.pets.FindByID(in.PetId)
	if err != nil {

		app.infoLog.Println("Pets not found")
		return nil, status.Errorf(codes.Internal, "Pets not found error: %s", err)

	}
	result := createPetDTO(model)
	return result, nil

}
func (app *Application) DeletePet(ctx context.Context, in *DeletePetRequest) (*emptypb.Empty, error) {

	out := new(emptypb.Empty)
	// Define Pets model
	id := strconv.FormatInt(in.PetId, 10)

	// Delete Pets by id
	err := app.pets.Delete(id)
	if err != nil {
		app.serverError(err)
		return nil, status.Errorf(codes.Internal, "DeletePet error: %s", err)
	}

	app.infoLog.Printf("Have been eliminated pet with id: %d ", in.PetId)
	return out, nil
}

func (app *Application) FindPetsByStatus(ctx context.Context, in *FindPetsByStatusRequest) (*FindPetsByStatusResponse, error) {

	reqStatus := in.Status
	app.infoLog.Printf("Endpoint Hit: FindPetsByStatus %s \n", reqStatus)
	var model []PetEntity

	statusList := convertPetStatusList(reqStatus)

	// Find Pets by id
	model, err := app.pets.FindByStatus(statusList)
	if err != nil {
		if err.Error() == "ErrNoDocuments" {
			app.infoLog.Println("Pets not found")
			return nil, status.Errorf(codes.Internal, "Pets not found error: %s", err)
		}
		// Any other error will send an internal server error
		app.serverError(err)
		return nil, status.Errorf(codes.Internal, "FindPetsByStatus error: %s", err)

	}
	result := CreatePetListDTO(model)

	return &FindPetsByStatusResponse{Items: result}, nil
}

func (app *Application) FindPetsByTags(ctx context.Context, in *FindPetsByTagsRequest) (*FindPetsByTagsResponse, error) {

	tags := in.Tags
	app.infoLog.Printf("Endpoint Hit: FindPetsByStatus %s \n", tags)
	var model []PetEntity

	// Find Pets by id
	model, err := app.pets.FindByTagsRedis("pets", tags)
	if err != nil {
		if err.Error() == "ErrNoDocuments" {
			app.infoLog.Println("Pets not found")
			return nil, status.Errorf(codes.Internal, "Pets not found error: %s", err)
		}
		// Any other error will send an internal server error
		app.serverError(err)
		return nil, status.Errorf(codes.Internal, "FindPetsByTags error: %s", err)

	}
	items := CreatePetListDTO(model)
	return &FindPetsByTagsResponse{Items: items}, nil
}

func (app *Application) UpdatePet(ctx context.Context, in *UpdatePetRequest) (*emptypb.Empty, error) {

	out := new(emptypb.Empty)
	// Define Pets model
	// Define Pets model
	petRequest := in.GetBody()
	m := createPetEntity(petRequest)

	// Insert new Pets
	pet, err := app.pets.Update(*m)
	if err != nil {
		app.serverError(err)
	}

	app.infoLog.Printf("New pet have been created, id=%s \n", pet.ID)
	return out, nil

}

func (app *Application) UpdatePetWithForm(context.Context, *UpdatePetWithFormRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePetWithForm not implemented")
}
