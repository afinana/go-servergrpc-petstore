/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.6
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package petstore

/**
DTO:

type Pet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category  *Category `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Id        int64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PhotoUrls []string  `protobuf:"bytes,4,rep,name=photoUrls,proto3" json:"photoUrls,omitempty"`
	// pet status in the store
	Status Pet_PetStatus `protobuf:"varint,5,opt,name=status,proto3,enum=swaggerpetstore.Pet_PetStatus" json:"status,omitempty"`
	Tags   []*Tag        `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

Entity:

type PetEntity struct {
	ID        primitive.ObjectID `json:"ID" bson:"_id,omitempty"`
	Id        int64              `json:"id,omitempty"`
	Category  *CategoryEntity    `json:"category,omitempty"`
	Name      string             `json:"name"`
	PhotoUrls []string           `json:"photoUrls"`
	Tags      []TagEntity        `json:"tags,omitempty"`
	// pet status in the store
	Status string `json:"status,omitempty"`
}
type CategoryEntity struct {
	Id   int64  `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
}


**/
var (
	Pet_PetStatus_enum = map[string]Pet_PetStatus{
		"PET_STATUS_AVAILABLE": Pet_PET_STATUS_AVAILABLE,
		"PET_STATUS_PENDING":   Pet_PET_STATUS_PENDING,
		"PET_STATUS_SOLD":      Pet_PET_STATUS_SOLD,
	}
)

func createPetEntity(in *Pet) *PetEntity {

	tags := []TagEntity{}
	// for loop of tags
	for _, item := range in.Tags {
		tags = append(tags, TagEntity{Id: item.Id, Name: item.Name})

	}

	photoUrls := []string{}
	// for loop of tags

	photoUrls = append(photoUrls, in.PhotoUrls...)

	//for _, item := range in.PhotoUrls {
	//	photoUrls = append(photoUrls, item)
	//}

	categoryDTO := in.Category
	result := &PetEntity{Id: in.Id, Category: &CategoryEntity{Id: categoryDTO.Id, Name: categoryDTO.Name},
		Name: categoryDTO.Name, Tags: tags, Status: in.Status.String(), PhotoUrls: photoUrls}

	return result
}

// CreatePetDTO

func createPetDTO(in *PetEntity) *Pet {

	tags := []*Tag{}
	// for loop of tags
	for _, item := range in.Tags {
		tags = append(tags, &Tag{Id: item.Id, Name: item.Name})

	}

	photoUrls := []string{}
	photoUrls = append(photoUrls, in.PhotoUrls...)

	categoryDTO := in.Category
	statusDTO := Pet_PetStatus_enum[in.Status]
	result := &Pet{Id: in.Id, Category: &Category{Id: categoryDTO.Id, Name: categoryDTO.Name},
		Name: categoryDTO.Name, Tags: tags, Status: statusDTO, PhotoUrls: photoUrls}

	return result
}

func convertPetStatusList(status []FindPetsByStatusRequest_Status) []string {

	result := []string{}
	// for loop of status
	for _, item := range status {
		result = append(result, item.String())

	}

	return result
}

func CreatePetListDTO(pets []PetEntity) []*Pet {

	result := []*Pet{}
	// for loop of status
	for _, item := range pets {
		result = append(result, createPetDTO(&item))

	}

	return result
}
