// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: petstore.pb

package petstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwaggerPetstoreServiceServer is the server API for SwaggerPetstoreService service.
// All implementations must embed UnimplementedSwaggerPetstoreServiceServer
// for forward compatibility
type SwaggerPetstoreServiceServer interface {
	// Add a new pet to the store
	AddPet(context.Context, *AddPetRequest) (*emptypb.Empty, error)
	// Create user
	//
	// This can only be done by the logged in user.
	CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	// Creates list of users with given input array
	CreateUsersWithArrayInput(context.Context, *CreateUsersWithArrayInputRequest) (*emptypb.Empty, error)
	// Creates list of users with given input array
	CreateUsersWithListInput(context.Context, *CreateUsersWithListInputRequest) (*emptypb.Empty, error)
	// Delete purchase order by ID
	//
	// For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
	DeleteOrder(context.Context, *DeleteOrderRequest) (*emptypb.Empty, error)
	// Deletes a pet
	DeletePet(context.Context, *DeletePetRequest) (*emptypb.Empty, error)
	// Delete user
	//
	// This can only be done by the logged in user.
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// Finds Pets by status
	//
	// Multiple status values can be provided with comma separated strings
	FindPetsByStatus(context.Context, *FindPetsByStatusRequest) (*FindPetsByStatusResponse, error)
	// Finds Pets by tags
	//
	// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
	FindPetsByTags(context.Context, *FindPetsByTagsRequest) (*FindPetsByTagsResponse, error)
	// Returns pet inventories by status
	//
	// Returns a map of status codes to quantities
	GetInventory(context.Context, *emptypb.Empty) (*GetInventoryResponse, error)
	// Find purchase order by ID
	//
	// For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
	GetOrderById(context.Context, *GetOrderByIdRequest) (*Order, error)
	// Find pet by ID
	//
	// Returns a single pet
	GetPetById(context.Context, *GetPetByIdRequest) (*Pet, error)
	// Get user by user name
	GetUserByName(context.Context, *GetUserByNameRequest) (*User, error)
	// Logs user into the system
	LoginUser(context.Context, *LoginUserRequest) (*ApiResponse, error)
	// Logs out current logged in user session
	LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Place an order for a pet
	PlaceOrder(context.Context, *PlaceOrderRequest) (*Order, error)
	// Update an existing pet
	UpdatePet(context.Context, *UpdatePetRequest) (*emptypb.Empty, error)
	// Updates a pet in the store with form data
	UpdatePetWithForm(context.Context, *UpdatePetWithFormRequest) (*emptypb.Empty, error)
	// Updated user
	//
	// This can only be done by the logged in user.
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	// uploads an image
	UploadFile(context.Context, *UploadFileRequest) (*ApiResponse, error)
	mustEmbedUnimplementedSwaggerPetstoreServiceServer()
}

// UnimplementedSwaggerPetstoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSwaggerPetstoreServiceServer struct {
}

func (UnimplementedSwaggerPetstoreServiceServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}

func (UnimplementedSwaggerPetstoreServiceServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) GetOrderById(context.Context, *GetOrderByIdRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}

func (UnimplementedSwaggerPetstoreServiceServer) AddPet(context.Context, *AddPetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPet not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) DeletePet(context.Context, *DeletePetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}

func (UnimplementedSwaggerPetstoreServiceServer) UpdatePet(context.Context, *UpdatePetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePet not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) UpdatePetWithForm(context.Context, *UpdatePetWithFormRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePetWithForm not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) FindPetsByStatus(context.Context, *FindPetsByStatusRequest) (*FindPetsByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPetsByStatus not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) FindPetsByTags(context.Context, *FindPetsByTagsRequest) (*FindPetsByTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPetsByTags not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) GetPetById(context.Context, *GetPetByIdRequest) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetById not implemented")
}

func (UnimplementedSwaggerPetstoreServiceServer) GetInventory(context.Context, *emptypb.Empty) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) CreateUsersWithArrayInput(context.Context, *CreateUsersWithArrayInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersWithArrayInput not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) CreateUsersWithListInput(context.Context, *CreateUsersWithListInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersWithListInput not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) GetUserByName(context.Context, *GetUserByNameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) LoginUser(context.Context, *LoginUserRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}

func (UnimplementedSwaggerPetstoreServiceServer) UploadFile(context.Context, *UploadFileRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedSwaggerPetstoreServiceServer) mustEmbedUnimplementedSwaggerPetstoreServiceServer() {
}

// UnsafeSwaggerPetstoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwaggerPetstoreServiceServer will
// result in compilation errors.
type UnsafeSwaggerPetstoreServiceServer interface {
	mustEmbedUnimplementedSwaggerPetstoreServiceServer()
}

func RegisterSwaggerPetstoreServiceServer(s grpc.ServiceRegistrar, srv SwaggerPetstoreServiceServer) {
	s.RegisterService(&SwaggerPetstoreService_ServiceDesc, srv)
}

func _SwaggerPetstoreService_AddPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).AddPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/AddPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).AddPet(ctx, req.(*AddPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_CreateUsersWithArrayInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersWithArrayInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).CreateUsersWithArrayInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/CreateUsersWithArrayInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).CreateUsersWithArrayInput(ctx, req.(*CreateUsersWithArrayInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_CreateUsersWithListInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersWithListInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).CreateUsersWithListInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/CreateUsersWithListInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).CreateUsersWithListInput(ctx, req.(*CreateUsersWithListInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/DeletePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).DeletePet(ctx, req.(*DeletePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_FindPetsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPetsByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).FindPetsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/FindPetsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).FindPetsByStatus(ctx, req.(*FindPetsByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_FindPetsByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPetsByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).FindPetsByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/FindPetsByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).FindPetsByTags(ctx, req.(*FindPetsByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/GetInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).GetInventory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).GetOrderById(ctx, req.(*GetOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_GetPetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).GetPetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/GetPetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).GetPetById(ctx, req.(*GetPetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).GetUserByName(ctx, req.(*GetUserByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/LogoutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).LogoutUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_UpdatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).UpdatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/UpdatePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).UpdatePet(ctx, req.(*UpdatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_UpdatePetWithForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetWithFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).UpdatePetWithForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/UpdatePetWithForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).UpdatePetWithForm(ctx, req.(*UpdatePetWithFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwaggerPetstoreService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwaggerPetstoreServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swaggerpetstore.SwaggerPetstoreService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwaggerPetstoreServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwaggerPetstoreService_ServiceDesc is the grpc.ServiceDesc for SwaggerPetstoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwaggerPetstoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swaggerpetstore.SwaggerPetstoreService",
	HandlerType: (*SwaggerPetstoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPet",
			Handler:    _SwaggerPetstoreService_AddPet_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _SwaggerPetstoreService_CreateUser_Handler,
		},
		{
			MethodName: "CreateUsersWithArrayInput",
			Handler:    _SwaggerPetstoreService_CreateUsersWithArrayInput_Handler,
		},
		{
			MethodName: "CreateUsersWithListInput",
			Handler:    _SwaggerPetstoreService_CreateUsersWithListInput_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _SwaggerPetstoreService_DeleteOrder_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _SwaggerPetstoreService_DeletePet_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _SwaggerPetstoreService_DeleteUser_Handler,
		},
		{
			MethodName: "FindPetsByStatus",
			Handler:    _SwaggerPetstoreService_FindPetsByStatus_Handler,
		},
		{
			MethodName: "FindPetsByTags",
			Handler:    _SwaggerPetstoreService_FindPetsByTags_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _SwaggerPetstoreService_GetInventory_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _SwaggerPetstoreService_GetOrderById_Handler,
		},
		{
			MethodName: "GetPetById",
			Handler:    _SwaggerPetstoreService_GetPetById_Handler,
		},
		{
			MethodName: "GetUserByName",
			Handler:    _SwaggerPetstoreService_GetUserByName_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _SwaggerPetstoreService_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _SwaggerPetstoreService_LogoutUser_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _SwaggerPetstoreService_PlaceOrder_Handler,
		},
		{
			MethodName: "UpdatePet",
			Handler:    _SwaggerPetstoreService_UpdatePet_Handler,
		},
		{
			MethodName: "UpdatePetWithForm",
			Handler:    _SwaggerPetstoreService_UpdatePetWithForm_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SwaggerPetstoreService_UpdateUser_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _SwaggerPetstoreService_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petstore.pb",
}
